// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobServiceClient is the client API for JobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobServiceClient interface {
	// simple RPC
	ReturnJobList(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*JobListResponse, error)
	// bidirectional streaming RPC
	JobsBiStreaming(ctx context.Context, opts ...grpc.CallOption) (JobService_JobsBiStreamingClient, error)
}

type jobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobServiceClient(cc grpc.ClientConnInterface) JobServiceClient {
	return &jobServiceClient{cc}
}

func (c *jobServiceClient) ReturnJobList(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*JobListResponse, error) {
	out := new(JobListResponse)
	err := c.cc.Invoke(ctx, "/jobs_service.JobService/ReturnJobList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobServiceClient) JobsBiStreaming(ctx context.Context, opts ...grpc.CallOption) (JobService_JobsBiStreamingClient, error) {
	stream, err := c.cc.NewStream(ctx, &JobService_ServiceDesc.Streams[0], "/jobs_service.JobService/JobsBiStreaming", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobServiceJobsBiStreamingClient{stream}
	return x, nil
}

type JobService_JobsBiStreamingClient interface {
	Send(*JobsRequest) error
	Recv() (*JobsResponse, error)
	grpc.ClientStream
}

type jobServiceJobsBiStreamingClient struct {
	grpc.ClientStream
}

func (x *jobServiceJobsBiStreamingClient) Send(m *JobsRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *jobServiceJobsBiStreamingClient) Recv() (*JobsResponse, error) {
	m := new(JobsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobServiceServer is the server API for JobService service.
// All implementations must embed UnimplementedJobServiceServer
// for forward compatibility
type JobServiceServer interface {
	// simple RPC
	ReturnJobList(context.Context, *NoParam) (*JobListResponse, error)
	// bidirectional streaming RPC
	JobsBiStreaming(JobService_JobsBiStreamingServer) error
	mustEmbedUnimplementedJobServiceServer()
}

// UnimplementedJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobServiceServer struct {
}

func (UnimplementedJobServiceServer) ReturnJobList(context.Context, *NoParam) (*JobListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReturnJobList not implemented")
}
func (UnimplementedJobServiceServer) JobsBiStreaming(JobService_JobsBiStreamingServer) error {
	return status.Errorf(codes.Unimplemented, "method JobsBiStreaming not implemented")
}
func (UnimplementedJobServiceServer) mustEmbedUnimplementedJobServiceServer() {}

// UnsafeJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobServiceServer will
// result in compilation errors.
type UnsafeJobServiceServer interface {
	mustEmbedUnimplementedJobServiceServer()
}

func RegisterJobServiceServer(s grpc.ServiceRegistrar, srv JobServiceServer) {
	s.RegisterService(&JobService_ServiceDesc, srv)
}

func _JobService_ReturnJobList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServiceServer).ReturnJobList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jobs_service.JobService/ReturnJobList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServiceServer).ReturnJobList(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _JobService_JobsBiStreaming_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JobServiceServer).JobsBiStreaming(&jobServiceJobsBiStreamingServer{stream})
}

type JobService_JobsBiStreamingServer interface {
	Send(*JobsResponse) error
	Recv() (*JobsRequest, error)
	grpc.ServerStream
}

type jobServiceJobsBiStreamingServer struct {
	grpc.ServerStream
}

func (x *jobServiceJobsBiStreamingServer) Send(m *JobsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *jobServiceJobsBiStreamingServer) Recv() (*JobsRequest, error) {
	m := new(JobsRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// JobService_ServiceDesc is the grpc.ServiceDesc for JobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "jobs_service.JobService",
	HandlerType: (*JobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReturnJobList",
			Handler:    _JobService_ReturnJobList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JobsBiStreaming",
			Handler:       _JobService_JobsBiStreaming_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/jobs.proto",
}
